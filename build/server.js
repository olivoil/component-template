(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.Component = factory());
}(this, (function () { 'use strict';

    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    const escaped = {
        '"': '&quot;',
        "'": '&#39;',
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;'
    };
    function escape(html) {
        return String(html).replace(/["'&<>]/g, match => escaped[match]);
    }
    function each(items, fn) {
        let str = '';
        for (let i = 0; i < items.length; i += 1) {
            str += fn(items[i], i);
        }
        return str;
    }
    let on_destroy;
    function create_ssr_component(fn) {
        function $$render(result, props, bindings, slots) {
            const parent_component = current_component;
            const $$ = {
                on_destroy,
                context: new Map(parent_component ? parent_component.$$.context : []),
                // these will be immediately discarded
                on_mount: [],
                before_update: [],
                after_update: [],
                callbacks: blank_object()
            };
            set_current_component({ $$ });
            const html = fn(result, props, bindings, slots);
            set_current_component(parent_component);
            return html;
        }
        return {
            render: (props = {}, options = {}) => {
                on_destroy = [];
                const result = { head: '', css: new Set() };
                const html = $$render(result, props, {}, options);
                run_all(on_destroy);
                return {
                    html,
                    css: {
                        code: Array.from(result.css).map(css => css.code).join('\n'),
                        map: null // TODO
                    },
                    head: result.head
                };
            },
            $$render
        };
    }
    function add_attribute(name, value, boolean) {
        if (value == null || (boolean && !value))
            return '';
        return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
    }

    /* src/index.svelte generated by Svelte v3.14.1 */

    const Src = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
    	let { navigationItems = [
    		{ text: "Docs", href: "/" },
    		{ text: "Examples", href: "/" },
    		{ text: "Blog", href: "/" }
    	] } = $$props;

    	let isMenuOpen = false;

    	if ($$props.navigationItems === void 0 && $$bindings.navigationItems && navigationItems !== void 0) $$bindings.navigationItems(navigationItems);

    	return `<nav class="${"flex items-center justify-between flex-wrap bg-teal-500 p-6"}">
  <div class="${"flex items-center flex-shrink-0 text-white mr-6"}">
    <svg class="${"fill-current h-8 w-8 mr-2"}" width="${"54"}" height="${"54"}" viewBox="${"0 0 54 54"}" xmlns="${"http://www.w3.org/2000/svg"}">
      <path d="${"M13.5 22.1c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45\n        3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8\n        0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05zM0 38.3c1.8-7.2 6.3-10.8\n        13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8\n        7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45\n        4.05z"}"></path>
    </svg>
    <span class="${"font-semibold text-xl tracking-tight"}">Tailwind CSS</span>
  </div>
  <div class="${"block lg:hidden"}">
    <button class="${"flex items-center px-3 py-2 border rounded text-teal-200\n      border-teal-400 hover:text-white hover:border-white"}">
      <svg class="${"fill-current h-3 w-3"}" viewBox="${"0 0 20 20"}" xmlns="${"http://www.w3.org/2000/svg"}">
        <title>Menu</title>
        <path d="${"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z"}"></path>
      </svg>
    </button>
  </div>
  <div class="${[
		"w-full block flex-grow lg:flex lg:items-center lg:w-auto",
		!isMenuOpen ? "hidden" : ""
	].join(" ").trim()}">
    <div class="${"text-sm lg:flex-grow"}">
      ${each(navigationItems, (item, index) => `<a${add_attribute("href", item.href, 0)} class="${"block mt-4 lg:inline-block lg:mt-0 text-teal-200\n          hover:text-white " + escape(index === navigationItems.length - 1 ? "" : "mr-4")}">
          ${escape(item.text)}
        </a>`)}
    </div>
    <div>
      <a href="${"/"}" class="${"inline-block text-sm px-4 py-2 leading-none border rounded\n        text-white border-white hover:border-transparent hover:text-teal-500\n        hover:bg-white mt-4 lg:mt-0"}">
        Download
      </a>
    </div>
  </div>
</nav>`;
    });

    return Src;

})));
