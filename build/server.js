(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.Component = factory());
}(this, (function () { 'use strict';

    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    const escaped = {
        '"': '&quot;',
        "'": '&#39;',
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;'
    };
    function escape(html) {
        return String(html).replace(/["'&<>]/g, match => escaped[match]);
    }
    function each(items, fn) {
        let str = '';
        for (let i = 0; i < items.length; i += 1) {
            str += fn(items[i], i);
        }
        return str;
    }
    let on_destroy;
    function create_ssr_component(fn) {
        function $$render(result, props, bindings, slots) {
            const parent_component = current_component;
            const $$ = {
                on_destroy,
                context: new Map(parent_component ? parent_component.$$.context : []),
                // these will be immediately discarded
                on_mount: [],
                before_update: [],
                after_update: [],
                callbacks: blank_object()
            };
            set_current_component({ $$ });
            const html = fn(result, props, bindings, slots);
            set_current_component(parent_component);
            return html;
        }
        return {
            render: (props = {}, options = {}) => {
                on_destroy = [];
                const result = { head: '', css: new Set() };
                const html = $$render(result, props, {}, options);
                run_all(on_destroy);
                return {
                    html,
                    css: {
                        code: Array.from(result.css).map(css => css.code).join('\n'),
                        map: null // TODO
                    },
                    head: result.head
                };
            },
            $$render
        };
    }

    /* src/index.svelte generated by Svelte v3.14.1 */

    const css = {
    	code: "main.svelte-1l6968b{background-color:gray;color:white}",
    	map: "{\"version\":3,\"file\":\"index.svelte\",\"sources\":[\"index.svelte\"],\"sourcesContent\":[\"<script>\\n  export let names = [];\\n\\n  const capitalize = str =>\\n    str ? str[0].toUpperCase() + str.slice(1).toLowerCase() : \\\"\\\";\\n</script>\\n\\n<style>\\n  main {\\n    background-color: gray;\\n    color: white;\\n  }\\n</style>\\n\\n<main>\\n  <h1>hello!</h1>\\n  {#if names.length}\\n    <ul>\\n      {#each names as name}\\n        <li>{capitalize(name)}</li>\\n      {/each}\\n    </ul>\\n  {/if}\\n  <slot />\\n</main>\\n\"],\"names\":[],\"mappings\":\"AAQE,IAAI,eAAC,CAAC,AACJ,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,KAAK,AACd,CAAC\"}"
    };

    const Src = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
    	let { names = [] } = $$props;

    	const capitalize = str => str
    	? str[0].toUpperCase() + str.slice(1).toLowerCase()
    	: "";

    	if ($$props.names === void 0 && $$bindings.names && names !== void 0) $$bindings.names(names);
    	$$result.css.add(css);

    	return `<main class="${"svelte-1l6968b"}">
  <h1>hello!</h1>
  ${names.length
	? `<ul>
      ${each(names, name => `<li>${escape(capitalize(name))}</li>`)}
    </ul>`
	: ``}
  ${$$slots.default ? $$slots.default({}) : ``}
</main>`;
    });

    return Src;

})));
